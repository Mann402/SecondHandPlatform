// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecondHandPlatform.Models;

#nullable disable

namespace SecondHandPlatform.Migrations
{
    [DbContext(typeof(SecondhandplatformContext))]
    partial class SecondhandplatformContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("SecondHandPlatform.Models.Admin", b =>
                {
                    b.Property<string>("AdminID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AdminPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AdminID");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_price");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CartId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "product_id");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("cart", (string)null);
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category_name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("slug");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("SecondHandPlatform.Models.ContentManagement", b =>
                {
                    b.Property<int>("announcementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("announcementContent")
                        .HasColumnType("longtext");

                    b.Property<string>("announcementTitle")
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("publishDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("updateDate")
                        .HasColumnType("date");

                    b.HasKey("announcementID");

                    b.ToTable("ContentManagements");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.CustomerSupport", b =>
                {
                    b.Property<int>("ticketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("createdDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("customerMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("issueDetails")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("resolveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("response")
                        .HasColumnType("longtext");

                    b.Property<string>("userEmail")
                        .HasColumnType("longtext");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.Property<string>("userName")
                        .HasColumnType("longtext");

                    b.HasKey("ticketID");

                    b.HasIndex("userID");

                    b.ToTable("CustomerSupports");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.EscrowPayment", b =>
                {
                    b.Property<int>("paymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("orderID")
                        .HasColumnType("int");

                    b.Property<decimal>("paymentAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("paymentStatus")
                        .HasColumnType("longtext");

                    b.Property<int>("productID")
                        .HasColumnType("int");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.Property<int>("verificationID")
                        .HasColumnType("int");

                    b.HasKey("paymentID");

                    b.ToTable("EscrowPayments");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.FaceRecognition", b =>
                {
                    b.Property<int>("FaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("face_id");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("photo_path");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("verification_status");

                    b.HasKey("FaceId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id1");

                    b.ToTable("face_recognition", (string)null);
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedback_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateSubmitted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date_submitted")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("FeedbackId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("product_id1");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id2");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("SecondHandPlatform.Models.FraudDetection", b =>
                {
                    b.Property<int>("FraudDetectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fraud_detection_id");

                    b.Property<bool>("SuspiciousFlag")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("suspicious_flag");

                    b.Property<string>("TypingRhythm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("typing_rhythm");

                    b.Property<float>("TypingSpeed")
                        .HasColumnType("float")
                        .HasColumnName("typing_speed");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("FraudDetectionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id3");

                    b.ToTable("fraud_detection", (string)null);
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("order_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("OrderStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Processing")
                        .HasColumnName("order_status");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_amount");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("OrderId")
                        .HasName("PRIMARY");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id4");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("SecondHandPlatform.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_item_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderItemId")
                        .HasName("PRIMARY");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("orderitems", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "orderItems");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("payment_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payment_status")
                        .HasDefaultValueSql("'Pending'");

                    b.HasKey("PaymentId")
                        .HasName("PRIMARY");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex(new[] { "OrderId" }, "order_id");

                    b.ToTable("payments", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "payment");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("DatePosted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_posted")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsSold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsSold");

                    b.Property<bool>("IsVerificationRequested")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProductCondition")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("product_condition");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_description");

                    b.Property<byte[]>("ProductImage")
                        .HasMaxLength(255)
                        .HasColumnType("varbinary(255)")
                        .HasColumnName("product_image");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("product_name");

                    b.Property<decimal>("ProductPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("product_price");

                    b.Property<string>("ProductStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Unverified")
                        .HasColumnName("product_status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("VerificationRequestedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("VerifiedPrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("verified_price");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.HasIndex("CategoryId");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id5");

                    b.ToTable("products", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "product");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Report", b =>
                {
                    b.Property<int>("reportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("dataSummary")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("generatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("reportDetails")
                        .HasColumnType("longtext");

                    b.Property<string>("reportType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("reportID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<byte[]>("StudentCardPicture")
                        .HasMaxLength(255)
                        .HasColumnType("varbinary(255)")
                        .HasColumnName("student_card_picture");

                    b.Property<string>("UserStatus")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("user_status");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SecondHandPlatform.Models.UserAccountManagement", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("deactivateReason")
                        .HasColumnType("longtext");

                    b.Property<string>("userAccountStatus")
                        .HasColumnType("longtext");

                    b.Property<string>("userEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("userName")
                        .HasColumnType("longtext");

                    b.HasKey("userID");

                    b.ToTable("userAccountManagement");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.UserAddress", b =>
                {
                    b.Property<int>("UserAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("shipping_address_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_default");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_date");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("postcode");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("state");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("UserAddressId")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId");

                    b.ToTable("shipping_addresses", (string)null);
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Cart", b =>
                {
                    b.HasOne("SecondHandPlatform.Models.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cart_ibfk_2");

                    b.HasOne("SecondHandPlatform.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cart_ibfk_1");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.CustomerSupport", b =>
                {
                    b.HasOne("SecondHandPlatform.Models.UserAccountManagement", "UserAccountManagement")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccountManagement");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.FaceRecognition", b =>
                {
                    b.HasOne("SecondHandPlatform.Models.User", "User")
                        .WithMany("FaceRecognitions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("face_recognition_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Feedback", b =>
                {
                    b.HasOne("SecondHandPlatform.Models.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("feedback_ibfk_1");

                    b.HasOne("SecondHandPlatform.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("feedback_ibfk_2");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.FraudDetection", b =>
                {
                    b.HasOne("SecondHandPlatform.Models.User", "User")
                        .WithMany("FraudDetections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fraud_detection_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Order", b =>
                {
                    b.HasOne("SecondHandPlatform.Models.Cart", null)
                        .WithMany("Orders")
                        .HasForeignKey("CartId");

                    b.HasOne("SecondHandPlatform.Models.Product", null)
                        .WithMany("Orders")
                        .HasForeignKey("ProductId");

                    b.HasOne("SecondHandPlatform.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("orders_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.OrderItem", b =>
                {
                    b.HasOne("SecondHandPlatform.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecondHandPlatform.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Payment", b =>
                {
                    b.HasOne("SecondHandPlatform.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("SecondHandPlatform.Models.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Product", b =>
                {
                    b.HasOne("SecondHandPlatform.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_products_categories");

                    b.HasOne("SecondHandPlatform.Models.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("products_ibfk_1");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.UserAddress", b =>
                {
                    b.HasOne("SecondHandPlatform.Models.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Cart", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SecondHandPlatform.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("FaceRecognitions");

                    b.Navigation("Feedbacks");

                    b.Navigation("FraudDetections");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("UserAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
